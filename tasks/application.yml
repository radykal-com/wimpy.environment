---

- name: "Rendering CloudFormation template"
  shell: python {{ role_path }}/troposphere/application.py > /tmp/cloudformation-application-{{ wimpy_deploy_id }}.json
  changed_when: false

- name: "Create resources that are unique for every application: security groups and instance profile"
  cloudformation:
    profile: "{{ boto_profile | default(omit) }}"
    region: "{{ wimpy_aws_region }}"
    stack_name: "{{ wimpy_deployment_environment }}-{{ wimpy_application_name }}-resources"
    state: "present"
    template: "/tmp/cloudformation-application-{{ wimpy_deploy_id }}.json"
    template_parameters:
      VPC: "{{ wimpy_cf_environments[wimpy_deployment_environment]['stack_outputs']['VPC'] }}"
      Environment: "{{ wimpy_deployment_environment }}"
      AppName: "{{ wimpy_application_name }}"
      AppPort: "{{ wimpy_application_port | string }}"
      AppProtocol: "{{ wimpy_app_protocol }}"
      ExposedPort: "80"
      MasterKey: "{{ wimpy_cf_base.stack_outputs['MasterKey'] }}"
      StorageBucketName: "{{ wimpy_cf_base.stack_outputs['StorageBucket'] }}"
    tags:
      Environment: "{{ wimpy_deployment_environment }}"
      Type: "application"
      Managed: "Wimpy"
  register: wimpy_cf_application

- set_fact:
     wimpy_aws_instance_role: "{{ wimpy_cf_application['stack_outputs']['IAMInstanceProfile'] }}"
     wimpy_aws_vpc_id: "{{ wimpy_cf_environments[wimpy_deployment_environment]['stack_outputs']['VPC'] }}"
     wimpy_aws_elb_vpc_subnets: "{{ wimpy_cf_environments[wimpy_deployment_environment]['stack_outputs']['ELBSubnets'] }}"
     wimpy_aws_autoscaling_vpc_subnets: "{{ wimpy_cf_environments[wimpy_deployment_environment]['stack_outputs']['AppSubnets'] }}"
     wimpy_aws_lc_security_groups: ["{{ wimpy_cf_application.stack_outputs['InstanceSecurityGroup'] }}"]
     wimpy_aws_elb_security_groups: ["{{ wimpy_cf_application.stack_outputs['LoadBalancerSecurityGroup'] }}"]
